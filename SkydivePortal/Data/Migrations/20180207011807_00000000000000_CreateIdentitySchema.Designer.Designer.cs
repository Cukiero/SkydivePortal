// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SkydivePortal.Data;
using SkydivePortal.Models;
using System;

namespace SkydivePortal.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180207011807_00000000000000_CreateIdentitySchema.Designer")]
    partial class _00000000000000_CreateIdentitySchemaDesigner
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SkydivePortal.Models.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DropzoneId");

                    b.Property<int>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DropzoneId");

                    b.ToTable("ApplicationRoles");
                });

            modelBuilder.Entity("SkydivePortal.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int?>("ParachuteId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int?>("RegionId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ParachuteId");

                    b.HasIndex("RegionId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SkydivePortal.Models.ApplicationUserRoles", b =>
                {
                    b.Property<int>("ApplicationRoleId");

                    b.Property<string>("ApplicationUserId");

                    b.HasKey("ApplicationRoleId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ApplicationUserRoles");
                });

            modelBuilder.Entity("SkydivePortal.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("SkydivePortal.Models.Dropzone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Dropzones");
                });

            modelBuilder.Entity("SkydivePortal.Models.Dropzone_Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<int>("DropzoneId");

                    b.Property<int?>("ImageId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DropzoneId");

                    b.HasIndex("ImageId");

                    b.ToTable("Dropzone_Events");
                });

            modelBuilder.Entity("SkydivePortal.Models.Dropzone_Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("DropzoneId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DropzoneId");

                    b.ToTable("Dropzone_Posts");
                });

            modelBuilder.Entity("SkydivePortal.Models.Dropzone_Post_Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Dropzone_PostId");

                    b.Property<int>("ImageId");

                    b.HasKey("Id");

                    b.HasIndex("Dropzone_PostId");

                    b.HasIndex("ImageId");

                    b.ToTable("Dropzone_Post_Images");
                });

            modelBuilder.Entity("SkydivePortal.Models.Dropzone_User_Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .IsRequired();

                    b.Property<DateTime>("Date");

                    b.Property<int>("DropzoneId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DropzoneId");

                    b.ToTable("Dropzone_User_Posts");
                });

            modelBuilder.Entity("SkydivePortal.Models.Dropzone_User_Post_Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .IsRequired();

                    b.Property<DateTime>("Date");

                    b.Property<int>("Dropzone_User_PostId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("Dropzone_User_PostId");

                    b.ToTable("Dropzone_User_Post_Comments");
                });

            modelBuilder.Entity("SkydivePortal.Models.Dropzone_User_Post_Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Dropzone_User_PostId");

                    b.Property<int>("ImageId");

                    b.HasKey("Id");

                    b.HasIndex("Dropzone_User_PostId");

                    b.HasIndex("ImageId");

                    b.ToTable("Dropzone_User_Post_Images");
                });

            modelBuilder.Entity("SkydivePortal.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Img");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SkydivePortal.Models.PagePost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PagePosts");
                });

            modelBuilder.Entity("SkydivePortal.Models.Parachute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Manufacturer");

                    b.Property<string>("Name");

                    b.Property<int>("Size");

                    b.HasKey("Id");

                    b.ToTable("Parachutes");
                });

            modelBuilder.Entity("SkydivePortal.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("SkydivePortal.Models.UserJump", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId")
                        .IsRequired();

                    b.Property<DateTime>("Date");

                    b.Property<int?>("DropzoneId");

                    b.Property<int?>("Height");

                    b.Property<string>("Note");

                    b.Property<int>("Number");

                    b.Property<string>("Parachute");

                    b.Property<string>("Plane");

                    b.Property<string>("Video");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DropzoneId");

                    b.ToTable("UserJumps");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SkydivePortal.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SkydivePortal.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SkydivePortal.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SkydivePortal.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkydivePortal.Models.ApplicationRole", b =>
                {
                    b.HasOne("SkydivePortal.Models.Dropzone", "Dropzone")
                        .WithMany()
                        .HasForeignKey("DropzoneId");
                });

            modelBuilder.Entity("SkydivePortal.Models.ApplicationUser", b =>
                {
                    b.HasOne("SkydivePortal.Models.Parachute", "Parachute")
                        .WithMany()
                        .HasForeignKey("ParachuteId");

                    b.HasOne("SkydivePortal.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("SkydivePortal.Models.ApplicationUserRoles", b =>
                {
                    b.HasOne("SkydivePortal.Models.ApplicationRole", "ApplicationRole")
                        .WithMany()
                        .HasForeignKey("ApplicationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SkydivePortal.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkydivePortal.Models.Dropzone", b =>
                {
                    b.HasOne("SkydivePortal.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkydivePortal.Models.Dropzone_Event", b =>
                {
                    b.HasOne("SkydivePortal.Models.Dropzone", "Dropzone")
                        .WithMany()
                        .HasForeignKey("DropzoneId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SkydivePortal.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("SkydivePortal.Models.Dropzone_Post", b =>
                {
                    b.HasOne("SkydivePortal.Models.Dropzone", "Dropzone")
                        .WithMany()
                        .HasForeignKey("DropzoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkydivePortal.Models.Dropzone_Post_Image", b =>
                {
                    b.HasOne("SkydivePortal.Models.Dropzone_Post", "Dropzone_Post")
                        .WithMany("Dropzone_Post_Images")
                        .HasForeignKey("Dropzone_PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SkydivePortal.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkydivePortal.Models.Dropzone_User_Post", b =>
                {
                    b.HasOne("SkydivePortal.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SkydivePortal.Models.Dropzone", "Dropzone")
                        .WithMany()
                        .HasForeignKey("DropzoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkydivePortal.Models.Dropzone_User_Post_Comment", b =>
                {
                    b.HasOne("SkydivePortal.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SkydivePortal.Models.Dropzone_User_Post", "Dropzone_User_Post")
                        .WithMany("Dropzone_User_Post_Comments")
                        .HasForeignKey("Dropzone_User_PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkydivePortal.Models.Dropzone_User_Post_Image", b =>
                {
                    b.HasOne("SkydivePortal.Models.Dropzone_User_Post", "Dropzone_User_Post")
                        .WithMany("Dropzone_User_Post_Images")
                        .HasForeignKey("Dropzone_User_PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SkydivePortal.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkydivePortal.Models.Region", b =>
                {
                    b.HasOne("SkydivePortal.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkydivePortal.Models.UserJump", b =>
                {
                    b.HasOne("SkydivePortal.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SkydivePortal.Models.Dropzone", "Dropzone")
                        .WithMany()
                        .HasForeignKey("DropzoneId");
                });
#pragma warning restore 612, 618
        }
    }
}
